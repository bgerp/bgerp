<?php


/**
 * –ú–µ–Ω–∏–¥–∂—ä—Ä –Ω–∞ –æ—Ç–ø—É—Å–∫–∏
 *
 *
 * @category  bgerp
 * @package   hr
 *
 * @author    Gabriela Petrova <gab4eto@gmail.com>
 * @copyright 2006 - 2017 Experta OOD
 * @license   GPL 3
 *
 * @since     v 0.1
 * @title     –ú–æ–ª–±–∏ –∑–∞ –æ—Ç–ø—É—Å–∫–∏
 */
class hr_Leaves extends core_Master
{
    /**
     * –ü–æ–¥–¥—ä—Ä–∂–∞–Ω–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏
     */
    public $interfaces = 'doc_DocumentIntf';
    
    
    /**
     * –ó–∞–≥–ª–∞–≤–∏–µ
     */
    public $title = '–ú–æ–ª–±–∏ –∑–∞ –æ—Ç–ø—É—Å–∫';
    
    
    /**
     * –ó–∞–≥–ª–∞–≤–∏–µ –≤ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–æ —á–∏—Å–ª–æ
     */
    public $singleTitle = '–ú–æ–ª–±–∞ –∑–∞ –æ—Ç–ø—É—Å–∫';
    
    
    /**
     * –ü–ª—ä–≥–∏–Ω–∏ –∑–∞ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ
     */
    public $loadList = 'plg_RowTools2, hr_Wrapper, doc_plg_TransferDoc,bgerp_plg_Blank,plg_Sorting, 
    				 doc_DocumentPlg, acc_plg_DocumentSummary, doc_ActivatePlg,
    				 plg_Printing,doc_SharablePlg,plg_Search, hr_EmailCreatePlg';

    
    /**
     * –ü–æ–ª–µ—Ç–∞, –∫–æ–∏—Ç–æ —â–µ —Å–µ –ø–æ–∫–∞–∑–≤–∞—Ç –≤ –ª–∏—Å—Ç–æ–≤ –∏–∑–≥–ª–µ–¥
     */
    public $listFields = 'id,personId, leaveFrom, leaveTo, leaveDays, note, paid';


    /**
     * @var array
     */
    protected static $emojiList = array('s1' => 'üè•', 's2' => 'ü§í', 's3' => 'üíä', 's4' => 'üõå',
                                    'l1' => '‚è≥', 'l6' => 'üèîÔ∏è', 'l2' => '‚ùÑÔ∏è', 'l3' => '‚õ∑Ô∏è', 'l4' => 'üèñÔ∏è', 'l5' => 'üå¥',
                                    't1' => '‚úàÔ∏è', 't2' => 'üåç', 't3' => 'üß≥', 't4' => 'üöó',
                                    'h1' => 'üè†', 'h2' => 'üíª', 'h3' => '‚òï', 'h4' => 'ü™ü');


    /**
     * –ü–æ–ª–µ—Ç–∞ –æ—Ç –∫–æ–∏—Ç–æ —Å–µ –≥–µ–Ω–µ—Ä–∏—Ä–∞—Ç –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏ –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ (@see plg_Search)
     */
    public $searchFields = 'personId,leaveFrom, leaveTo,note';
    
    
    /**
     * –ó–∞ –ø–ª—ä–≥–∏–Ω–∞ acc_plg_DocumentSummary
     */
    public $filterFieldDateFrom = 'leaveFrom';
    public $filterFieldDateTo = 'leaveTo';
    
    
    /**
     * –ü–æ–ª–µ –≤ –∫–æ–µ—Ç–æ –¥–∞ —Å–µ –ø–æ–∫–∞–∑–≤–∞ –∏–∫–æ–Ω–∞—Ç–∞ –∑–∞ –µ–¥–∏–Ω–∏—á–µ–Ω –∏–∑–≥–ª–µ–¥
     */
    public $rowToolsSingleField = 'personId';
    
    
    /**
     * –ë—Ä–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
     *
     * @var int
     */
    public $listItemsPerPage = 300;
    
    
    /**
     * –ö–æ–π –∏–º–∞ –ø—Ä–∞–≤–æ –¥–∞ —á–µ—Ç–µ?
     */
    public $canRead = 'ceo,hrLeaves,hrMaster';
    
    
    /**
     * –ö–æ–π –∏–º–∞ –ø—Ä–∞–≤–æ –¥–∞ –ø—Ä–æ–º–µ–Ω—è?
     */
    public $canEdit = 'powerUser';
    
    
    /**
     * –ö–æ–π –∏–º–∞ –ø—Ä–∞–≤–æ –¥–∞ –¥–æ–±–∞–≤—è?
     */
    public $canAdd = 'powerUser';
    
    
    /**
     * –ö–æ–π –º–æ–∂–µ –¥–∞ –≥–æ —Ä–∞–∑–≥–ª–µ–∂–¥–∞?
     */
    public $canList = 'ceo, hrLeaves, admin';
    
    
    /**
     * –ö–æ–π –º–æ–∂–µ –¥–∞ —Ä–∞–∑–≥–ª–µ–∂–¥–∞ —Å–∏–Ω–≥—ä–ª–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ç–µ?
     */
    public $canSingle = 'powerUser';
    
    
    /**
     * –ö–æ–π –º–æ–∂–µ –¥–∞ —Ä–∞–∑–≥–ª–µ–∂–¥–∞ —Å–∏–Ω–≥—ä–ª–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ç–µ?
     */
    public $canReject = 'powerUser';
    
    
    /**
     * –ö–æ–π –º–æ–∂–µ –¥–∞ —Ä–∞–∑–≥–ª–µ–∂–¥–∞ —Å–∏–Ω–≥—ä–ª–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ç–µ?
     */
    public $canRestore = 'powerUser';
    
    
    /**
     * –ö–æ–π –º–æ–∂–µ –¥–∞ –≥–æ –∞–∫—Ç–∏–≤–∏—Ä–∞?
     */
    public $canActivate = 'ceo, hrLeaves, hrMaster';
    
    
    /**
     * –ö–æ–π –º–æ–∂–µ –¥–∞ –≥–æ –∞–∫—Ç–∏–≤–∏—Ä–∞?
     */
    public $canDecline = 'ceo, hrLeaves, hrMaster';
    
    
    /**
     * –ö–æ–π –º–æ–∂–µ –¥–∞ –≥–æ –∏–∑—Ç—Ä–∏–µ?
     */
    public $canDelete = 'powerUser';

    
    /**
     * –ï–¥–∏–Ω–∏—á–Ω–∞ –∏–∫–æ–Ω–∞
     */
    public $singleIcon = 'img/16/leaves.png';
    
    
    /**
     * –®–∞–±–ª–æ–Ω –∑–∞ –µ–¥–∏–Ω–∏—á–Ω–∏—è –∏–∑–≥–ª–µ–¥
     */
    public $singleLayoutFile = 'hr/tpl/SingleLeaveRequest.shtml';
    
    
    /**
     * –ê–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞
     */
    public $abbr = 'Lve';
    
    
    /**
     * –ì—Ä—É–ø–∏—Ä–∞–Ω–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ç–µ
     */
    public $newBtnGroup = '5.2|–ß–æ–≤–µ—à–∫–∏ —Ä–µ—Å—É—Ä—Å–∏';
    
    
    /**
     * –ö–æ–π –º–æ–∂–µ –¥–∞ –≥–æ –ø—Ä–∞–≤–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —á–∞–∫–∞—â/—á–µ—Ä–Ω–æ–≤–∞?
     */
    public $canPending = 'powerUser';
    
    
    /**
     * –î–∞–ª–∏ –º–æ–∂–µ –¥–∞ –±—ä–¥–µ —Å–∞–º–æ –≤ –Ω–∞—á–∞–ª–æ—Ç–æ –Ω–∞ –Ω–∏—à–∫–∞
     */
    public $onlyFirstInThread = true;
    
    
    /**
     * –ü–æ –∫–æ–µ –ø–æ–ª–µ —â–µ —Å–µ –ø—Ä–µ–º–µ—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
     */
    public $transferFolderField = 'personId';
    
    
    public static $map = array('paid' => '–ø–ª–∞—Ç–µ–Ω', 'unpaid' => '–Ω–µ–ø–ª–∞—Ç–µ–Ω');
    
    
    /**
     * –î–Ω–∏—Ç–µ –æ—Ç —Å–µ–¥–º–∏—Ü–∞—Ç–∞
     */
    public static $weekDays = array('Monday' => '–ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫', 'Tuesday' => '–≤—Ç–æ—Ä–Ω–∏–∫', 'Wednesday' => '—Å—Ä—è–¥–∞',
        'Thursday' => '—á–µ—Ç–≤—ä—Ä—Ç—ä–∫', 'Friday' => '–ø–µ—Ç—ä–∫', 'Saturday' => '—Å—ä–±–æ—Ç–∞', 'Sunday' => '–Ω–µ–¥–µ–ª—è');
    
    
    /**
     * –ü–æ–ª–µ –∑–∞ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –ø–æ –¥–∞—Ç–∞
     */
    public $filterDateField = 'createdOn, leaveFrom,leaveTo, modifiedOn';
    
    
    /**
     * –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –º–æ–¥–µ–ª–∞ (—Ç–∞–±–ª–∏—Ü–∞—Ç–∞)
     */
    public function description()
    {
        $this->FLD('docType', 'enum(request=–ú–æ–ª–±–∞ –∑–∞ –æ—Ç–ø—É—Å–∫, order=–ó–∞–ø–æ–≤–µ–¥ –∑–∞ –æ—Ç–ø—É—Å–∫)', 'caption=–î–æ–∫—É–º–µ–Ω—Ç, input=none,column=none');
        $this->FLD('personId', 'key(mvc=crm_Persons,select=name,allowEmpty)', 'caption=–°–ª—É–∂–∏—Ç–µ–ª, mandatory');
        $this->FLD('leaveFrom', 'date', 'caption=–°—á–∏—Ç–∞–Ω–æ->–û—Ç, mandatory');
        $this->FLD('leaveTo', 'date', 'caption=–°—á–∏—Ç–∞–Ω–æ->–î–æ, mandatory');
        $this->FLD('leaveDays', 'int', 'caption=–°—á–∏—Ç–∞–Ω–æ->–î–Ω–∏, input=none');
        $this->FLD('emoji', cls::get('type_Enum', array('options' => hr_Leaves::getEmojiesWithPrefix('l'))), 'caption=–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è->–ò–∫–æ–Ω–∞ –∑–∞ –Ω–∏–∫–∞, maxRadio=6,columns=6,notNull,value=l5');
        $this->FLD('useDaysFromYear', 'int', 'caption=–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è->–ü–æ–ª–∑–≤–∞–Ω–µ –æ—Ç,unit=–≥–æ–¥–∏–Ω–∞, input=none');
        $this->FLD('paid', 'enum(paid=–ø–ª–∞—Ç–µ–Ω, unpaid=–Ω–µ–ø–ª–∞—Ç–µ–Ω)', 'caption=–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è->–í–∏–¥, maxRadio=2,columns=2,notNull,value=paid');
        $this->FLD('note', 'richtext(rows=5, bucket=Notes, shareUsersRoles=hrLeaves|ceo)', 'caption=–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è->–ë–µ–ª–µ–∂–∫–∏');
        $this->FLD('answerGSM', 'enum(yes=–î–∞, no=–ù–µ, partially=–ß–∞—Å—Ç–∏—á–Ω–æ)', 'caption=–ü–æ –≤—Ä–µ–º–µ –Ω–∞ –æ—Ç—Å—ä—Å—Ç–≤–∏–µ—Ç–æ->–û—Ç–≥–æ–≤–∞—Ä—è –Ω–∞ –º–æ–±. —Ç–µ–ª–µ—Ñ–æ–Ω, maxRadio=3,columns=3,notNull,value=yes');
        $this->FLD('answerSystem', 'enum(yes=–î–∞, no=–ù–µ, partially=–ß–∞—Å—Ç–∏—á–Ω–æ)', 'caption=–ü–æ –≤—Ä–µ–º–µ –Ω–∞ –æ—Ç—Å—ä—Å—Ç–≤–∏–µ—Ç–æ->–î–æ—Å—Ç—ä–ø –¥–æ —Å–∏—Å—Ç–µ–º–∞—Ç–∞, maxRadio=3,columns=3,notNull,value=yes');
        $this->FLD('alternatePersons', 'keylist(mvc=crm_Persons,select=name,group=employees,allowEmpty=true)', 'caption=–ü–æ –≤—Ä–µ–º–µ –Ω–∞ –æ—Ç—Å—ä—Å—Ç–≤–∏–µ—Ç–æ->–ó–∞–º–µ—Å—Ç–Ω–∏—Ü–∏, oldFieldName=alternatePerson');

        // –°–ø–æ–¥–µ–ª–µ–Ω–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
        $this->FLD('sharedUsers', 'userList(roles=hrLeaves|ceo, showClosedUsers=no)', 'caption=–°–ø–æ–¥–µ–ª—è–Ω–µ->–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏');
    }

    
    /**
     * –ò–∑–ø—ä–ª–Ω—è–≤–∞ —Å–µ –ø—Ä–µ–¥–∏ –æ–ø–∞–∫–æ–≤–∞–Ω–µ –Ω–∞ —Å—ä–¥–∞—Ä–∂–∞–Ω–∏–µ—Ç–æ –æ—Ç –º–µ–Ω–∏–¥–∂—ä—Ä–∞
     *
     * @param core_Mvc            $mvc
     * @param null|string|core_ET $res
     * @param string|core_ET      $tpl
     * @param stdClass            $data
     *
     * @return bool
     */
    protected static function on_BeforeRenderSingleLayout($mvc, &$res, &$tpl = null, $data = null)
    {
        $curUrl = getCurrentUrl();
        
        if ($curUrl['Order'] == 'yes') {
            $mvc->singleLayoutFile = 'hr/tpl/SingleLeaveOrders.shtml';
        }
    }
    
    
    /**
     * –ò–∑–≤–∏–∫–≤–∞ —Å–µ –ø—Ä–µ–¥–∏ –≤–∫–∞—Ä–≤–∞–Ω–µ –Ω–∞ –∑–∞–ø–∏—Å –≤ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ –Ω–∞ –º–æ–¥–µ–ª–∞
     */
    public static function on_AfterSave($mvc, &$id, $rec, $saveFields = null)
    {
        $mvc->updateRequestsToCalendar($rec->id);
    }
    
    
    /**
     * –§–∏–ª—Ç—ä—Ä –Ω–∞ on_AfterPrepareListFilter()
     * –ú–∞–ª–∫–æ –º–∞–Ω–∏–ø—É–ª–∞—Ü–∏–∏ —Å–ª–µ–¥ –ø–æ–¥–≥–æ—Ç–≤—è–Ω–µ—Ç–æ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ
     *
     * @param core_Mvc $mvc
     * @param stdClass $data
     */
    public static function on_AfterPrepareListFilter($mvc, $data)
    {
        $data->listFilter->FLD('employeeId', 'key(mvc=crm_Persons,select=name,allowEmpty,group=employees)', 'caption=–°–ª—É–∂–∏—Ç–µ–ª,silent,before=paid');
        $data->listFilter->showFields = $data->listFilter->showFields . ',employeeId';
        $data->listFilter->input('employeeId', 'silent');
        
        $data->listFilter->fields['paid']->caption = '–í–∏–¥';
        
        // –ü–æ–∫–∞–∑–≤–∞–º–µ —Å–∞–º–æ —Ç–æ–≤–∞ –ø–æ–ª–µ. –ò–Ω–∞—á–µ –∏ –¥—Ä—É–≥–∏—Ç–µ –ø–æ–ª–µ—Ç–∞
        // –Ω–∞ –º–æ–¥–µ–ª–∞ —â–µ —Å–µ –ø–æ—è–≤—è—Ç
        $data->listFilter->showFields .= ', employeeId, paid';
        
        $data->listFilter->input('employeeId, paid', 'silent');
        
        if ($data->listFilter->rec->paid) {
            $data->query->where("#paid = '{$data->listFilter->rec->paid}'");
        }
        
        if ($data->listFilter->rec->employeeId) {
            $data->query->where("#personId = '{$data->listFilter->rec->employeeId}'");
        }
    }


    /**
     * –§—É–Ω–∫—Ü–∏—è, –∫–æ—è—Ç–æ –≤—Ä—ä—â–∞ –∏–∫–æ–Ω–∞—Ç–∞ –∑–∞ —Å—ä–æ—Ç–≤–µ—Ç–Ω–∏—è –µ–º–æ—Ç–∏–∫–æ–Ω
     *
     * @param string $emoji
     * @param string $class
     * @param null|string $from
     * @param null|string $to
     *
     * @return string
     */
    public static function getEmoji($emojiType, $class = 'statusIcon', $from = null, $to = null)
    {
        $emoji = '';
        if (!$emojiType) {

            return $emoji;
        }

        $today = dt::now(false);

        if (isset($from)) {
            list($dateFrom, ) = explode(' ', $from);
            if ($dateFrom > $today) {

                return $emoji;
            }
        }

        if (isset($to)) {
            list($dateTo, ) = explode(' ', $to);
            if ($dateTo < $today) {

                return $emoji;
            }
        }

        $emoji =  self::$emojiList[$emojiType] ? self::$emojiList[$emojiType] : '';
        if ($class) {
            $emoji = "<span class='{$class}'>{$emoji}</span>";
        }

        return $emoji;
    }


    /**
     * –§—É–Ω–∫—Ü–∏—è, –∫–æ—è—Ç–æ –≤—Ä—ä—â–∞ –º–∞—Å–∏–≤ —Å –µ–º–æ—Ç–∏–∫–æ–Ω–∏—Ç–µ
     *
     * @param string|null $pref
     *
     * @return array
     */
    public static function getEmojiesWithPrefix($pref = null)
    {
        if (!isset($pref)) {

            return self::$emojiList;
        }

        $emojies = array();
        foreach (self::$emojiList as $key => $emoji) {
            if (strpos($key, $pref) === 0) {
                $emojies[$key] = $emoji;
            }
        }

        return $emojies;
    }

    
    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ
     */
    public static function on_AfterPrepareEditForm($mvc, $data)
    {
        $form = &$data->form;
        $rec = &$form->rec;

        $nowYear = dt::mysql2Verbal(dt::now(), 'Y');
        for ($i = 0; $i <= 1; $i++) {
            $years[$nowYear - $i] = $nowYear - $i;
        }
        $form->setSuggestions('useDaysFromYear', $years);
        
        // –ù–∞–º–∏—Ä–∞—Ç —Å–µ –≤—Å–∏—á–∫–∏ —Å–ª—É–∂–∏—Ç–µ–ª–∏
        $employees = crm_Persons::getEmployeesOptions(false, null, false, 'active');
        unset($employees[$rec->personId]);
        $form->setSuggestions('alternatePersons', $employees);
        
        if (countR($employees)) {
            $form->setOptions('personId', $employees);
            $form->setSuggestions('alternatePersons', $employees);
        } else {
            redirect(array('crm_Persons', 'list'), false, '|–õ–∏–ø—Å–≤–∞ –∏–∑–±–æ—Ä –∑–∞ —Å–ª—É–∂–∏—Ç–µ–ª–∏|*');
        }
        
        $folderClass = doc_Folders::fetchCoverClassName($rec->folderId);
        
        if ($rec->folderId && $folderClass == 'crm_Persons') {
            $form->setDefault('personId', doc_Folders::fetchCoverId($rec->folderId));
            $form->setReadonly('personId');
            
            if (!haveRole('ceo,hrLeaves')) {
                $form->setField('sharedUsers', 'mandatory');
            }
        }
    }
    
    
    /**
     * –ò–∑–≤–∏–∫–≤–∞ —Å–µ —Å–ª–µ–¥ –≤—ä–≤–µ–∂–¥–∞–Ω–µ—Ç–æ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ –æ—Ç Request –≤—ä–≤ —Ñ–æ—Ä–º–∞—Ç–∞ ($form->rec)
     */
    protected static function on_AfterInputEditForm($mvc, &$form)
    {
        if (haveRole('ceo,hrLeaves,admin')) {
            $ignorable = true;
        } else {
            $ignorable = false;
        }
        
        $now = dt::now();
        
        // –µ–¥–∏–Ω –º–µ—Å–µ—Ü –Ω–∞–∑–∞–¥
        $before30Days = dt::addMonths(-1, $now);
        $before30DaysVerbal = dt::mysql2verbal($before30Days, 'd.m.Y');
        
        // –µ–¥–Ω–∞ –≥–æ–¥–∏–Ω–∞ –Ω–∞–ø—Ä–µ–¥
        $after1year = dt::addMonths(12, $now);
        $after1yearVerbal = dt::mysql2verbal($after1year, 'd.m.Y');
        
        if ($form->isSubmitted()) {
            // –†–∞–∑–º—è–Ω–∞, –∞–∫–æ –ø–µ—Ä–∏–æ–¥–∏—Ç–µ —Å–∞ –æ–±—ä—Ä–∫–∞–Ω–∏
            if (isset($form->rec->leaveFrom, $form->rec->leaveTo) && ($form->rec->leaveFrom > $form->rec->leaveTo)) {
                $form->setError('leaveFrom, leaveTo', '–ù–∞—á–∞–ª–Ω–∞—Ç–∞ –¥–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ-–º–∞–ª–∫–∞ –æ—Ç –∫—Ä–∞–π–Ω–∞—Ç–∞');
            }
            
            if (isset($form->rec->leaveFrom) && ($form->rec->leaveFrom < $before30Days)) {
                $form->setError('leaveFrom', "–ù–∞—á–∞–ª–Ω–∞—Ç–∞ –¥–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –µ —Å–ª–µ–¥ {$before30DaysVerbal}–≥.", $ignorable);
            }
            
            if (isset($form->rec->leaveFrom) && ($form->rec->leaveFrom > $after1year)) {
                $form->setError('leaveFrom', "–ù–∞—á–∞–ª–Ω–∞—Ç–∞ –¥–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø—Ä–µ–¥–∏ {$after1yearVerbal}–≥.", $ignorable);
            }
            
            if (isset($form->rec->leaveTo) && ($form->rec->leaveTo > $after1year)) {
                $form->setError('leaveTo', "–ö—Ä–∞–π–Ω–∞—Ç–∞ –¥–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø—Ä–µ–¥–∏ {$after1yearVerbal}–≥.", $ignorable);
            }
            
            // –ò–∑–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ –±—Ä–æ–π –¥–Ω–∏ –æ—Ç–ø—É—Å–∫–∞
            if ($form->rec->leaveFrom && $form->rec->leaveTo) {
                $scheduleId = planning_Hr::getSchedule($form->rec->personId);
                $days = hr_Schedules::calcLeaveDaysBySchedule($scheduleId, $form->rec->leaveFrom, $form->rec->leaveTo);
                $form->rec->leaveDays = $days->workDays;
            }
            
            // –∞–∫–æ –Ω–µ —Å–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∏ –¥–Ω–∏—Ç–µ –∑–∞ –æ—Ç–ø—É—Å–∫–∞ –∏–ª–∏ —Å–∞ –ø–æ-–º–∞–ª–∫–æ –æ—Ç 1, –¥–∞–≤–∞–º–µ –≥—Ä–µ—à–∫–∞
            if (!$form->rec->leaveDays || isset($form->rec->leaveDays) < 1) {
                $form->setError('leaveDays', '–ë—Ä–æ—è—Ç –Ω–µ–ø—Ä–∏—Å—ä—Å—Ç–≤–µ–Ω–∏ –¥–Ω–∏ –µ 0');
            }

            $iArr = hr_Leaves::getIntersections($form->rec->personId, $form->rec->startDate, $form->rec->toDate, $form->rec->id);
            // –∑–∞ –≤—Å—è–∫–∞ –µ–¥–Ω–∞ –º–æ–ª–±–∞ –æ—Ç–≥–æ–≤–∞—Ä—è—â–∞ –Ω–∞ —É—Å–ª–æ–≤–∏—è—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ
            if (!empty($iArr)) {
                // –∏ –∏–∑–ø–∏—Å–≤–∞–º–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                $form->setError('leaveFrom, leaveTo', "|–ó–∞—Å–∏—á–∞–Ω–µ –ø–æ –≤—Ä–µ–º–µ —Å: |*" . implode('<br>', $iArr));
            }
        }
    }


    /**
     * –í—Ä—ä—â–∞ –≤—Å–∏—á–∫–∏ –ø—Ä–µ—Å–∏—á–∞–Ω–∏—è –Ω–∞ –¥–∞—Ç–∏—Ç–µ
     *
     * @return void
     */
    public static function getIntersections($personId, $from, $to, $ignoreId = null)
    {
        $resArr = array();

        foreach (array('hr_Leaves', 'hr_HomeOffice', 'hr_Sickdays', 'hr_Trips') as $class) {
            $cls = cls::get($class);
            // –ø—Ä–∞–≤–∏–º –∑–∞—è–≤–∫–∞ –∫—ä–º –±–∞–∑–∞—Ç–∞
            $query = $class::getQuery();

            // —Ç—ä—Ä—Å–∏–º –≤—Å–∏—á–∫–∏ –º–æ–ª–±–∏, –∫–æ–∏—Ç–æ —Å–∞ –∑–∞ —Ç–µ–∫—É—â–∏—è –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
            $query->where(array("#personId = '[#1#]'", $personId));

            if ($ignoreId) {
                $query->where(array("#id != '[#1#]'", $ignoreId));
            }

            $lFiedFrom = 'startDate';
            $lFiedTo = 'toDate';
            if ($class == 'hr_Leaves') {
                $lFiedFrom = 'leaveFrom';
                $lFiedTo = 'leaveTo';
            }

            // —Ç—ä—Ä—Å–∏–º –≤—Ä–µ–º–µ–≤–æ –∑–∞—Å–∏—á–∞–Ω–µ
            $query->where(array("(#{$lFiedFrom} <= '[#1#]' AND #{$lFiedTo} >= '{$from}')
                OR
                (#{$lFiedFrom} <= '[#2#]' AND #{$lFiedTo} >= '[#2#]')", $from, $to));

            $query->where("#state = 'active'");

            // –∑–∞ –≤—Å—è–∫–∞ –µ–¥–Ω–∞ –º–æ–ª–±–∞ –æ—Ç–≥–æ–≤–∞—Ä—è—â–∞ –Ω–∞ —É—Å–ª–æ–≤–∏—è—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ
            while ($recReq = $query->fetch()) {
                $title = $cls->getRecTitle($recReq);
                $url = $cls->haveRightFor('single', $recReq) ? array($cls, 'single', $recReq->id) : array();
                $resArr[] = ht::createLink($title, $url, null, 'ef_icon=' . $cls->singleIcon);
            }
        }

        return $resArr;
    }
    
    
    /**
     * –ò–∑–ø—ä–ª–Ω—è–≤–∞ —Å–µ —Å–ª–µ–¥ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞—Ç–∞ –Ω–∞ —Ä–æ–ª–∏—Ç–µ, –∫–æ–∏—Ç–æ –º–æ–≥–∞—Ç –¥–∞ –∏–∑–ø—ä–ª–Ω—è–≤–∞—Ç —Ç–æ–≤–∞ –¥–µ–π—Å—Ç–≤–∏–µ.
     *
     * @param core_Mvc $mvc
     * @param string   $requiredRoles
     * @param string   $action
     * @param stdClass $rec
     * @param int      $userId
     */
    public static function on_AfterGetRequiredRoles($mvc, &$requiredRoles, $action, $rec = null, $userId = null)
    {
        if ($rec->id) {
            
            if ($action == 'order') {
                // –∏ –Ω—è–º–∞–º–µ –Ω—É–∂–Ω–∏—Ç–µ –ø—Ä–∞–≤–∞
                if (!Users::haveRole('ceo') || !Users::haveRole('hrLeaves')) {
                    // —Ç–æ –Ω–µ –º–æ–∂–µ –¥–∞ —è –Ω–∞–ø—Ä–∞–≤–∏–º
                    $requiredRoles = 'no_one';
                }
            }
        }
        
        if ($action == 'add' || $action == 'reject' || $action == 'decline') {
            if ($rec->folderId) {
                $folderClass = doc_Folders::fetchCoverClassName($rec->folderId);
                
                if ($rec->folderId && $folderClass == 'crm_Persons') {
                    $personId = doc_Folders::fetchCoverId($rec->folderId);
                    $inCharge = crm_Profiles::fetchField("#personId = '{$personId}'", 'userId');
                    
                    //$inCharge = doc_Folders::fetchField($rec->folderId, 'inCharge');
                    
                    if ($inCharge != $userId) {
                        if (!Users::haveRole('ceo') && !Users::haveRole('hrLeaves')) {
                            // —Ç–æ –Ω–µ –º–æ–∂–µ –¥–∞ —è –Ω–∞–ø—Ä–∞–≤–∏–º
                            $requiredRoles = 'no_one';
                        }
                    }
                }
            }

            if ($action == 'reject' && $rec && $rec->state == 'active' && $rec->leaveFrom <= dt::now()) {
                if (!haveRole('hrLeaves, ceo')) {
                    $requiredRoles = 'no_one';
                }
            }
        }
    }
    
    
    /**
     * –°–ª–µ–¥ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞ —Ç—É–ª–±–∞—Ä–∞ –Ω–∞ –µ–¥–∏–Ω–∏—á–µ–Ω –∏–∑–≥–ª–µ–¥.
     *
     * @param core_Mvc $mvc
     * @param stdClass $data
     */
    public static function on_AfterPrepareSingleToolbar($mvc, $data)
    {
        // –ê–∫–æ –Ω—è–º–∞–º–µ –ø—Ä–∞–≤–∞ –∑–∞ –ø–∏—Å–∞–Ω–µ –≤ —Ç—Ä–µ–¥–∞
        if (doc_Threads::haveRightFor('single', $data->rec->threadId) == false) {
            
            // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ –±—É—Ç–æ–Ω–∞ –∑–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä
            $data->toolbar->removeBtn('–ö–æ–º–µ–Ω—Ç–∞—Ä');
        }
        
        
        if ($mvc->haveRightFor('decline', $data->rec) && $data->rec->state != 'closed') {
            $data->toolbar->addBtn(
                    '–û—Ç–∫–∞–∑',
                    array(
                        $mvc,
                        'Decline',
                        'id' => $data->rec->id,
                        'ret_url' => array('hr_Leaves', 'single', $data->rec->id)
                    ),
                    array('ef_icon' => 'img/16/cancel16.png',
                        'title' => '–û—Ç–∫–∞–∑ –Ω–∞ –º–æ–ª–±–∞—Ç–∞'
                    )
                );
        }
        
        // –ê–∫–æ –Ω—è–º–∞–º–µ –ø—Ä–∞–≤–∞ –∑–∞ –ø–∏—Å–∞–Ω–µ –≤ —Ç—Ä–µ–¥–∞
        if (doc_Threads::haveRightFor('single', $data->rec->threadId) && ($data->rec->state != 'draft' && $data->rec->state != 'pending')) {
            
            // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ –±—É—Ç–æ–Ω–∞ –∑–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä
            $data->toolbar->removeBtn('activate');
            $data->toolbar->removeBtn('–û—Ç–∫–∞–∑');
        }
    }
    
    
    /**
     * –§—É–Ω–∫—Ü–∏—è, –∫–æ—è—Ç–æ –ø—Ä–∏—Ö–≤–∞—â–∞ —Å–ª–µ–¥ –∞–∫—Ç–∏–≤–∏—Ä–∞–Ω–µ—Ç–æ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
     */
    public static function on_AfterActivation($mvc, &$rec)
    {
        //
        $rec = $mvc->fetchRec($rec);
        $subscribedArr = keylist::toArray($rec->sharedUsers);
        $subscribedArr[$rec->createdBy] = $rec->createdBy;

        if (isset($rec->alternatePersons)) {
            foreach (type_Keylist::toArray($rec->alternatePersons) as $aPerson) {
                $alternatePersonId = crm_Profiles::fetchField(array("#personId = '[#1#]'", $aPerson), 'userId');
                if ($alternatePersonId) {
                    $subscribedArr[$alternatePersonId] = $alternatePersonId;
                }
            }
        }
        
        if (countR($subscribedArr)) {
            foreach ($subscribedArr as $userId) {
                if ($userId > 0 && doc_Threads::haveRightFor('single', $rec->threadId, $userId)) {
                    $rec->message = '|–ê–∫—Ç–∏–≤–∏—Ä–∞–Ω–∞ –µ |* "' . self::getRecTitle($rec) . '"';
                    $rec->url = array('doc_Containers', 'list', 'threadId' => $rec->threadId);
                    $rec->customUrl = array($mvc, 'single',  $rec->id);
                    $rec->priority = 0;
                    
                    bgerp_Notifications::add($rec->message, $rec->url, $userId, $rec->priority, $rec->customUrl);
                }
            }
        }
    }
    
    
    /**
     * –î–æ–±–∞–≤—è –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏ –∑–∞ –ø—ä–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ —Ç—ä—Ä—Å–µ–Ω–µ
     */
    protected static function on_AfterGetSearchKeywords($mvc, &$res, $rec)
    {
        $title = $mvc->getRecTitle($rec, false);
        $res .= ' ' . plg_Search::normalizeText($title);
    }
    
    
    /**
     * –û–±–Ω–æ–≤—è–≤–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞ –∑–∞ –º–æ–ª–±–∏—Ç–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
     */
    public static function updateRequestsToCalendar($id)
    {
        $rec = static::fetch($id);
        
        $events = array();
        
        // –ì–æ–¥–∏–Ω–∞—Ç–∞ –Ω–∞ –¥–∞—Ç–∞—Ç–∞ –æ—Ç –ø—Ä–µ–¥–∏ 30 –¥–Ω–∏ –µ –Ω–∞—á–∞–ª–Ω–∞
        $cYear = date('Y', time() - 30 * 24 * 60 * 60);
        
        // –ù–∞—á–∞–ª–Ω–∞ –¥–∞—Ç–∞
        $fromDate = "{$cYear}-01-01";
        
        // –ö—Ä–∞–π–Ω–∞ –¥–∞—Ç–∞
        $toDate = ($cYear + 2) . '-12-31';
        
        // –ü—Ä–µ—Ñ–∏–∫—Å –Ω–∞ –∫–ª—é—á–æ–≤–µ—Ç–µ –∑–∞ –∑–∞–ø–∏—Å–∏—Ç–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞ –æ—Ç —Ç–∞–∑–∏ –∑–∞–¥–∞—á–∞
        $prefix = "REQ-{$id}-";
        
        $curDate = $rec->leaveFrom;

        $personProfile = crm_Profiles::fetch("#personId = '{$rec->personId}'");
        if (!$personProfile || !$personProfile->userId) {

            return ;
        }

        while ($curDate < dt::addDays(1, $rec->leaveTo) ){
            // –ü–æ–¥–≥–æ—Ç–≤—è–º–µ –∑–∞–ø–∏—Å –∑–∞ –Ω–∞—á–∞–ª–Ω–∞—Ç–∞ –¥–∞—Ç–∞
            if ($curDate && $curDate >= $fromDate && $curDate <= $toDate && ($rec->state == 'active' || $rec->state == 'rejected')) {

                $calRec = new stdClass();
                
                // –ö–ª—é—á –Ω–∞ —Å—ä–±–∏—Ç–∏–µ—Ç–æ
                $calRec->key = $prefix . "-{$curDate}";
                
                // –ù–∞—á–∞–ª–æ –Ω–∞ –æ—Ç–ø—É—Å–∫–∞—Ç–∞
                $calRec->time = $curDate;
                
                // –î–∞–ª–∏ –µ —Ü—è–ª –¥–µ–Ω?
                $calRec->allDay = 'yes';
                
                // –ò–∫–æ–Ω–∞ –Ω–∞ –∑–∞–ø–∏—Å–∞
                $calRec->type = 'leaves';
                
                $personName = crm_Persons::fetchField($rec->personId, 'name');
                
                // –ó–∞–≥–ª–∞–≤–∏–µ –∑–∞ –∑–∞–ø–∏—Å–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
                $calRec->title = "–û—Ç–ø—É—Å–∫: {$personName}";

                $personId = array($personProfile->userId => 0);

                $user = keylist::fromArray($personId);
                
                // –í —á–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–∏ –¥–∞ –≤–ª–µ–∑–µ?
                $calRec->users = $user;
                
                // –°—Ç–∞—Ç—É—Å –Ω–∞ –∑–∞–¥–∞—á–∞—Ç–∞
                $calRec->state = $rec->state;
                
                // Url –Ω–∞ –∑–∞–¥–∞—á–∞—Ç–∞
                $calRec->url = array('hr_Leaves', 'Single', $id);
                
                $events[] = $calRec;
            }

            $curDate = dt::addDays(1, $curDate);
        }

        $onlyDel = $rec->state == 'rejected' ? true : false;

        return cal_Calendar::updateEvents($events, $fromDate, $toDate, $prefix, $onlyDel);
    }
    
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –Ω–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç –º–æ–∂–µ –¥–∞ –±—ä–¥–µ –¥–æ–±–∞–≤–µ–Ω –≤
     * –ø–æ—Å–æ—á–µ–Ω–∞—Ç–∞ –ø–∞–ø–∫–∞
     *
     * @param $folderId int –∏–¥ –Ω–∞ –ø–∞–ø–∫–∞—Ç–∞
     */
    public static function canAddToFolder($folderId)
    {
        $Cover = doc_Folders::getCover($folderId);
        
        // –¢—Ä—è–±–≤–∞ –¥–∞ –µ –≤ –ø–∞–ø–∫–∞ –Ω–∞ –ª–∏—Ü–µ –∏–ª–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç
        if ($Cover->className != 'crm_Persons' && $Cover->className != 'doc_UnsortedFolders') {
            
            return false;
        }
        
        // –ê–∫–æ –µ –≤ –ø–∞–ø–∫–∞ –Ω–∞ –ª–∏—Ü–µ, –ª–∏—Ü–µ—Ç–æ —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –≤ –≥—Ä—É–ø–∞ —Å–ª—É–∂–∏—Ç–µ–ª–∏
        if ($Cover->className == 'crm_Persons') {
            $emplGroupId = crm_Groups::getIdFromSysId('employees');
            $personGroups = $Cover->fetchField('groupList');
            if (!keylist::isIn($emplGroupId, $personGroups)) {
                
                return false;
            }
        }
        
        if ($Cover->className == 'doc_UnsortedFolders') {
            $cu = core_Users::getCurrent();
            if (!haveRole('ceo,hrLeaves', $cu)) {
                
                return false;
            }
        }
        
        return true;
    }
    
    
    /**
     * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ–Ω –º–µ—Ç–æ–¥ –Ω–∞ doc_DocumentIntf
     *
     * @param int $id
     *
     * @return stdClass $row
     */
    public function getDocumentRow_($id)
    {
        $rec = $this->fetch($id);
        
        $row = new stdClass();
        
        //–ó–∞–≥–ª–∞–≤–∏–µ
        $row->title = "–ú–æ–ª–±–∞ –∑–∞ –æ—Ç–ø—É—Å–∫  ‚Ññ{$rec->id}";
        
        //–°—ä–∑–¥–∞—Ç–µ–ª—è
        $row->author = $this->getVerbal($rec, 'createdBy');
        
        //–°—ä—Å—Ç–æ—è–Ω–∏–µ
        $row->state = $rec->state;
        
        //id –Ω–∞ —Å—ä–∑–¥–∞—Ç–µ–ª—è
        $row->authorId = $rec->createdBy;
        
        $row->recTitle = $this->getRecTitle($rec, false);
        
        return $row;
    }
    
    
    /**
     * –í—Ä—ä—â–∞ —Ä–∞–∑–±–∏—Ä–∞–µ–º–æ –∑–∞ —á–æ–≤–µ–∫–∞ –∑–∞–≥–ª–∞–≤–∏–µ, –æ—Ç–≥–æ–≤–∞—Ä—è—â–æ –Ω–∞ –∑–∞–ø–∏—Å–∞
     */
    public static function getRecTitle($rec, $escaped = true)
    {
        $me = cls::get(get_called_class());
        
        $title = tr('–ú–æ–ª–±–∞ –∑–∞ –æ—Ç–ø—É—Å–∫–∞  ‚Ññ|*'. $rec->id . ' –Ω–∞|* ') . $me->getVerbal($rec, 'personId');
        
        return $title;
    }
    
    
    /**
     * –°–ª–µ–¥ –ø—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–Ω–µ –Ω–∞ –∑–∞–ø–∏—Å–∞ –≤ —á–µ—Ç–∏–º –∑–∞ —Ö–æ—Ä–∞ –≤–∏–¥
     */
    public static function on_AfterRecToVerbal($mvc, &$row, $rec, $fields = array())
    {
        $DateTime = cls::get('core_DateTime');

        if (isset($rec->activatedOn)) {
            $row->activatedOn = dt::mysql2verbal($rec->activatedOn, 'd.m.Y');
        }
        
        if (isset($rec->activatedBy)) {
            $row->activatedBy = core_Users::getVerbal($rec->activatedBy, 'names');
            if (!Mode::isReadOnly()) {
                $row->activatedBy = crm_Profiles::createLink($rec->activatedBy, $row->activatedBy);
            }
        }
        
        
        if ($rec->leaveFrom) {
            $tLeaveFrom = dt::mysql2timestamp($rec->leaveFrom);
            $dayOfWeekFrom = date('l', $tLeaveFrom);
            
           // list(, $hourFrom) = explode(' ', $rec->leaveFrom);
            
            //if ($hourFrom != '00:00:00') {
                $row->leaveFrom = $DateTime->mysql2verbal($rec->leaveFrom, 'd.m.Y');
                //$row->fromHour = $DateTime->mysql2verbal($rec->leaveFrom, 'H:i');
           // }
            
            $row->dayFrom = static::$weekDays[$dayOfWeekFrom];
        }
        
        if ($rec->leaveTo) {
            $tLeaveTo = dt::mysql2timestamp($rec->leaveTo);
            $dayOfWeekTo = date('l', $tLeaveTo);
            
           // list(, $hourTo) = explode(' ', $rec->leaveTo);
            
            //if ($hourTo != '23:59:59') {
                $row->leaveTo = $DateTime->mysql2verbal($rec->leaveTo, 'd.m.Y');
            //    $row->toHour = $DateTime->mysql2verbal($rec->leaveTo, 'H:i');
            //}
            
            $row->dayTo = static::$weekDays[$dayOfWeekTo];
        }
        
        $myCompany = crm_Companies::fetchOurCompany();
        $row->myCompany = $myCompany->name;

        $row->alternatePersons = static::purifyeAlternatePersons($rec->alternatePersons);
    }


    /**
     * –ü–æ–º–æ—â–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –∑–∞–º–µ—Å—Ç–≤–∞—â–∏—Ç–µ –ª–∏—Ü–∞
     *
     * @param null|string $alternatePersons
     * @param boolean $showNick
     *
     * @return string
     */
    public static function purifyeAlternatePersons($alternatePersons, $showNick = false)
    {
        $res = '';
        if (isset($alternatePersons)) {
            $aPersonsArr = array();
            foreach (type_Keylist::toArray($alternatePersons) as $aPerson) {
                if ($showNick) {
                    $uId = crm_Profiles::fetchField(array("#personId = '[#1#]'", $aPerson), 'userId');
                    if ($uId) {
                        $aPersonsArr[] = crm_Profiles::createLink($uId);

                        continue;
                    }
                }
                // –ê–∫–æ –∏–º–∞–º–µ –ø—Ä–∞–≤–∞ –¥–∞ –≤–∏–¥–∏–º –≤–∏–∑–∏—Ç–∫–∞—Ç–∞
                if (crm_Persons::haveRightFor('single', $aPerson) && ($name = crm_Persons::fetchField(array("#id = '[#1#]'", $aPerson), 'name'))) {
                    $aPersonsArr[] = ht::createLink($name, array('crm_Persons', 'single', 'id' => $aPerson), null, 'ef_icon = img/16/vcard.png');
                } else {
                    $pRow = crm_Persons::recToVerbal($aPerson, 'name');
                    if ($pRow) {
                        $aPersonsArr[] = $pRow->name;
                    } else {
                        $aPersonsArr[] = $aPerson;
                    }
                }
            }

            if (!empty($aPersonsArr)) {
                $res = implode(', ', $aPersonsArr);
            }
        }

        return $res;
    }
    
    
    /**
     * –ò–∑–≤–∏–∫–≤–∞ —Å–µ –ø—Ä–µ–¥–∏ —Ä–µ–Ω–¥–∏—Ä–∞–Ω–µ—Ç–æ –Ω–∞ '–æ–ø–∞–∫–æ–≤–∫–∞—Ç–∞'
     */
    public static function on_AfterRenderSingleLayout($mvc, &$tpl, $data)
    {
        if (isset($data->rec->leaveFrom, $data->rec->leaveTo)) {
            $leaveFrom = strstr($data->rec->leaveFrom, ' ', true);
            $leaveTo = strstr($data->rec->leaveTo, ' ', true);
        }
        
        if (trim($leaveFrom) == trim($leaveTo)) {
            $tpl->removeBlock('leaveFrom');
            $tpl->removeBlock('fromHour');
            $tpl->removeBlock('dayFrom');
            $tpl->removeBlock('to');
        } else {
            $tpl->removeBlock('on');
        }

        if ($data->rec->state == 'closed') {
            $row = new stdClass();
            $rowTpl = $tpl->getBlock('decline');
            
            if (isset($data->rec->modifiedOn)) {
                $row->modifiedOn = dt::mysql2verbal($data->rec->modifiedOn, 'd.m.Y');
            }
            
            if (isset($data->rec->modifiedBy)) {
                $row->modifiedBy = core_Users::getVerbal($data->rec->modifiedBy, 'names');
                if (!Mode::isReadOnly()) {
                    $row->modifiedBy = crm_Profiles::createLink($data->rec->modifiedBy, $row->modifiedBy);
                }
            }
            
            if (Mode::is('printing') || Mode::is('text', 'xhtml')) {
                $row->modifiedOn = dt::mysql2verbal(dt::addDays(-1, $data->rec->leaveFrom), 'd.m.Y');
            }
            
            $rowTpl->placeObject($row);
            $rowTpl->removeBlocks();
            $rowTpl->append2master();
            
            $tpl->removeBlock('activatedBy');
        } else {
            $tpl->removeBlock('decline');
  
        }
        
        $leaveFromTs = dt::mysql2timestamp($data->rec->leaveFrom);
        $activatedOnTs = dt::mysql2timestamp($data->rec->activatedOn);
        $modifiedOnTs = dt::mysql2timestamp($data->rec->modifiedOn);
        $createdOnTs = dt::mysql2timestamp($data->rec->createdOn);
        
        // –ê–∫–æ —â–µ —Ä–∞–∑–ø–µ—á–∞—Ç–≤–∞–º–µ –∏–ª–∏ —â–µ –æ—Ç–≤–æ—Ä–∏–º —Å–∏–Ω–≥—ä–ª–∞ –æ—Ç qr-–∫–æ–¥
        if (Mode::is('printing') || Mode::is('text', 'xhtml')) {
            // –∞–∫–æ –Ω–∞—á–∞–ª–Ω–∞—Ç–∞ –¥–∞—Ç–∞ –Ω–∞ –æ—Ç–ø—É—Å–∫–∞—Ç–∞ –µ –ø–æ-–º–∞–ª–∫–∞ –æ—Ç –¥–∞—Ç–∞ –Ω–∞ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            // –∏–ª–∏ –¥–∞—Ç–∞—Ç–∞ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –µ –ø–æ-–≥–æ–ª—è–º–∞ –æ—Ç  –Ω–∞—á–∞–Ω–∞—Ç–∞ –¥–∞—Ç–∞ –Ω–∞ –æ—Ç–ø—É—Å–∫–∞—Ç–∞
            // –∏—Å–∫–∞–º–µ –¥–∞—Ç–∏—Ç–µ –Ω–∞ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –∏ –æ–¥–æ–±—Ä—è–≤–∞–Ω–µ –¥–∞ —Å–∞ –ø—Ä–µ–¥–∏ –Ω–∞—á–∞–ª–Ω–∞—Ç–∞ –¥–∞—Ç–∞
            if($leaveFromTs <= $createdOnTs || $activatedOnTs >= $leaveFromTs ) {
  
                if($data->rec->state == 'active'){

                    // –∑–∞–º–µ–Ω—è–º–µ –¥–∞—Ç–∞—Ç –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–æ
                    $row = new stdClass();
                    $rowTpl = $tpl->getBlock('activatedBy');
                    $row->activatedOn = dt::mysql2verbal(dt::addDays(-1, $data->rec->leaveFrom), 'd.m.Y');
                    
                    // –∫–æ–π –µ –æ–¥–æ–±—Ä–∏–ª
                    if (isset($data->rec->activatedBy)) {
                        $row->activatedBy = core_Users::getVerbal($data->rec->activatedBy, 'names');
                        if (!Mode::isReadOnly()) {
                            $row->activatedBy = crm_Profiles::createLink($data->rec->activatedBy, $row->activatedBy);
                        }
                    }
                    
                    $rowTpl->placeObject($row);
                    $rowTpl->removeBlocks();
                    $rowTpl->append2master();
                }

                    // –∑–∞–º–µ–Ω—è–º–µ –¥–∞—Ç–∞—Ç –Ω–∞ –º–æ–ª–±–∞—Ç–∞
                    $row1 = new stdClass();
                    $rowTpl1 = $tpl->getBlock('createdDate'); //bp($rowTpl1->createdDate, $data->rec, $row);
                    $row1->createdDate =  dt::mysql2verbal(dt::addDays(-2, $data->rec->leaveFrom), 'd.m.Y');
                    $rowTpl1->placeObject($row1);
                    $rowTpl1->removeBlocks();
                    $rowTpl1->append2master();
                    
                    // –∑–∞–º–µ–Ω—è–º–µ –¥–∞—Ç–∞—Ç –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                    $row2 = new stdClass();
                    $rowTpl2 = $tpl->getBlock('createdDateFooter');
                    $row2->createdDate = dt::mysql2verbal(dt::addDays(-2, $data->rec->leaveFrom), 'd.m.Y');
                    $rowTpl2->placeObject($row1);
                    $rowTpl2->removeBlocks();
                    $rowTpl2->append2master();
            }
        }
    }
    
    
    /**
     * –ú–µ—Ç–æ–¥ –∑–∞ –æ—Ç–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –º–æ–ª–±–∞—Ç–∞ –∑–∞ –æ—Ç–ø—É—Å–∫
     */
    public static function act_Decline()
    {
        //–û—á–∞–∫–≤–∞–º–µ –¥–∞ –∏–º–∞ —Ç–∞–∫—ä–≤ –∑–∞–ø–∏—Å
        expect($id = Request::get('id', 'int'));
        
        expect($rec = hr_Leaves::fetch($id));
        
        // –û—á–∞–∫–≤–∞–º–µ –¥–∞ –∏–º–∞ –ø—Ä–∞–≤–∞ –∑–∞ –∑–∞–ø–∏—Å–∞
        hr_Leaves::requireRightFor('decline', $rec);
        
        //–û—á–∞–∫–≤–∞–º–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –¥–∞ –∏–º–∞ –ø—Ä–∞–≤–∞ –∑–∞ —Å–ø–∏—Ä–∞–Ω–µ
        hr_Leaves::haveRightFor('decline', $rec);
        
        $link = array('hr_Leaves', 'single', $rec->id);
        
        //–ü—Ä–æ–º–µ–Ω—è–º–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –∑–∞—Ç–≤–æ—Ä–µ–Ω–æ
        $rec->brState = $rec->state;
        $rec->state = 'closed';
        hr_Leaves::save($rec);
        
        $subscribedArr = keylist::toArray($rec->sharedUsers);
        $subscribedArr[$rec->createdBy] = $rec->createdBy;
        
        if (isset($rec->alternatePersons)) {
            foreach (type_Keylist::toArray($rec->alternatePersons) as $aPerson) {
                $alternatePersonId = crm_Profiles::fetchField(array("#personId = '[#1#]'", $aPerson), 'userId');
                if ($alternatePersonId) {
                    $subscribedArr[$alternatePersonId] = $alternatePersonId;
                }
            }
        }
        
        if (countR($subscribedArr)) {
            foreach ($subscribedArr as $userId) {
                if ($userId > 0 && doc_Threads::haveRightFor('single', $rec->threadId, $userId)) {
                    $rec->message = '|–û—Ç–∫–∞–∑–∞–Ω–∞ –µ |* "' . self::getRecTitle($rec) . '"';
                    $rec->url = array('doc_Containers', 'list', 'threadId' => $rec->threadId);
                    $rec->customUrl = array(get_called_class(), 'single',  $rec->id);
                    $rec->priority = 0;
                    
                    bgerp_Notifications::add($rec->message, $rec->url, $userId, $rec->priority, $rec->customUrl);
                }
            }
        }

        // –†–µ–¥–∏—Ä–µ–∫—Ç–≤–∞–º–µ
        return new Redirect($link, '|–£—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞–∑–∞—Ö—Ç–µ –º–æ–ª–±–∞ –∑–∞ –æ—Ç–ø—É—Å–∫–∞');
    }
}
